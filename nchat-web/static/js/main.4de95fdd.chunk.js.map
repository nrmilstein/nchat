{"version":3,"sources":["utils/NchatApi.tsx","chatApp/ChatAppContext.tsx","chatApp/sidebar/SidebarBanner.tsx","chatApp/sidebar/ConversationRow.tsx","chatApp/sidebar/ConversationList.tsx","chatApp/sidebar/Sidebar.tsx","chatApp/contentView/ConversationViewBanner.tsx","chatApp/contentView/MessageView.tsx","misc/LoadingIcon.tsx","chatApp/contentView/MessagesView.tsx","chatApp/contentView/MessageInput.tsx","chatApp/contentView/ConversationView.tsx","chatApp/contentView/ConversationCreatorViewBanner.tsx","chatApp/contentView/ConversationCreatorView.tsx","chatApp/contentView/ContentView.tsx","chatApp/ChatApp.tsx","utils/NchatWebSocket.tsx","chatApp/ChatAppLoader.tsx","accounts/LoginForm.tsx","accounts/SignUpForm.tsx","accounts/AccountsView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NchatApi","path","authKey","init","customHeaders","headers","this","appendHeaders","fetch","apiUrl","response","responseClone","clone","json","jsonResponse","ok","status","NchatApiErrorResponse","message","NchatApiError","body","postInit","JSON","stringify","putInit","deleteInit","additionalHeaders","headerKey","hasOwnProperty","Headers","append","Array","isArray","push","Error","captureStackTrace","ChatAppContext","React","createContext","user","id","name","username","SidebarBanner","props","Consumer","context","className","onClick","handleNewConversation","ConversationRow","selected","handleConversationRowClick","conversation","conversationPartner","messages","length","ConversationList","conversationRows","conversations","map","key","uuid","selectedConversation","Sidebar","ConversationViewBanner","MessageView","senderId","LoadingIcon","style","width","height","MessagesView","SCROLL_TOLERANCE","conversationViewDiv","createRef","scrollToBottom","bind","prevProps","prevState","isScrolledToBottom","ref","isLoading","snapshot","prevMessages","node","current","scrollTop","scrollHeight","clientHeight","scrollTo","Component","contextType","MessageInput","state","messageBody","handleChange","handleClickSend","handleKeyDown","event","setState","target","value","trim","handleSendMessage","type","onKeyDown","onChange","autoFocus","placeholder","disabled","ConversationView","ConversationCreatorViewBannerStatus","ConversationCreatorViewBanner","Empty","Loading","Ok","htmlFor","conversationCreatorUsername","onBlur","handleBlur","ConversationCreatorView","usernameInputStatus","handleUsernameChange","handleUsernameInputBlur","getConversationPartner","get","userJson","data","ContentView","isConversationCreatorOpen","ChatApp","handleMessageReceived","webSocket","addNotificationListener","isHistoryLoaded","index","findIndex","c","loadingConversations","update","$set","newMessages","uuidv4","sent","updatedConversations","notification","messageJson","conversationJson","newMessage","conversationIndex","addMessageToConversation","newConversation","sendMessage","messageIndex","m","syncedConversations","newState","updatedConversation","$push","withRemovedConversation","$splice","request","method","sendRequest","contextValue","Provider","close","NchatWebSocket","isAuthMessageSent","requestId","requestPromises","notificationListeners","addEventListener","location","window","url","protocol","host","WebSocket","websocketUrl","Promise","resolve","reject","nchatWebSocket","parse","listeners","listener","getNextId","send","registerPromise","getWebsocketUrl","ChatAppLoader","userPromise","initUser","conversationsPromise","initConversations","createWebSocket","sendAuth","all","LoginForm","password","handleSubmit","preventDefault","authenticateUser","onSubmit","required","to","SignUpForm","requestBody","post","AccountsView","setAuthenticatedUser","navigate","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4de95fdd.chunk.js","sourcesContent":["class NchatApi {\n  static apiUrl = \"/api/v1/\";\n\n  static async fetch<T>(path: string, authKey?: string, init?: RequestInit):\n    Promise<NchatApiSuccessResponse<T>> {\n\n    let customHeaders: { [index: string]: string } = {\n      \"Accept\": \"application/json\",\n    }\n    if (authKey) {\n      customHeaders[\"X-API-KEY\"] = authKey;\n    }\n\n    if (init) {\n      if (init.headers) {\n        this.appendHeaders(init.headers, customHeaders);\n      } else {\n        init.headers = customHeaders;\n      }\n    } else {\n      init = {\n        \"headers\": customHeaders,\n      }\n    }\n\n    const response = await fetch(this.apiUrl + path, init)\n\n    // If we want to pass the response in an error later, we must clone it, because\n    // response.body can only be consumed once.\n    const responseClone = response.clone();\n\n    const jsonResponse = await response.json();\n\n    if (!response.ok || (\"status\" in jsonResponse && jsonResponse.status !== \"success\")) {\n      if (\"status\" in jsonResponse && \"message\" in jsonResponse) {\n        throw new NchatApiErrorResponse(jsonResponse.message, responseClone, jsonResponse);\n      } else if (\"status\" in jsonResponse) {\n        throw new NchatApiErrorResponse(\"Nchat API error.\", responseClone, jsonResponse);\n      } else {\n        throw new NchatApiError(\"Nchat API error.\", responseClone);\n      }\n    }\n\n    if (!(\"status\" in jsonResponse)) {\n      throw new NchatApiError(\"Missing 'status' field in nchat response.\", responseClone);\n    }\n\n    return jsonResponse as NchatApiSuccessResponse<T>;\n  }\n\n  static async get<T>(path: string, authKey?: string, init?: RequestInit):\n    Promise<NchatApiSuccessResponse<T>> {\n    return this.fetch(path, authKey, init);\n  }\n\n  static async post<T>(path: string, body: any, authKey?: string, init?: RequestInit):\n    Promise<NchatApiSuccessResponse<T>> {\n    const postInit = {\n      ...init,\n      \"method\": \"POST\",\n      \"body\": JSON.stringify(body),\n    };\n    return this.fetch<T>(path, authKey, postInit);\n  }\n\n  static async put<T>(path: string, body: any, authKey?: string, init?: RequestInit):\n    Promise<NchatApiSuccessResponse<T>> {\n    const putInit = {\n      ...init,\n      \"method\": \"PUT\",\n      \"body\": JSON.stringify(body),\n    };\n    return this.fetch<T>(path, authKey, putInit);\n  }\n\n  static async delete<T>(path: string, authKey?: string, init?: RequestInit):\n    Promise<NchatApiSuccessResponse<T>> {\n    const deleteInit = {\n      ...init,\n      \"method\": \"DELETE\",\n    };\n    return this.fetch<T>(path, authKey, deleteInit);\n  }\n\n  private static appendHeaders(\n    headers: HeadersInit,\n    additionalHeaders: { [index: string]: string }) {\n    for (const headerKey in additionalHeaders) {\n      if (additionalHeaders.hasOwnProperty(headerKey)) {\n        if (headers instanceof Headers) {\n          headers.append(headerKey, additionalHeaders[headerKey]);\n        } else if (Array.isArray(headers)) {\n          headers.push([headerKey, additionalHeaders[headerKey]]);\n        } else if (typeof headers === 'object') {\n          headers[headerKey] = additionalHeaders[headerKey];\n        }\n      }\n    }\n  }\n}\n\ninterface NchatApiSuccessResponse<T> {\n  status: string,\n  data: T,\n}\n\ninterface NchatApiFailureResponse {\n  status: string,\n  message: string,\n  code: number,\n}\n\nclass NchatApiError extends Error {\n  response: Response;\n  constructor(message: string, response: Response) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, NchatApiError)\n    }\n    this.response = response;\n  }\n}\n\nclass NchatApiErrorResponse extends NchatApiError {\n  body: NchatApiErrorResponse;\n\n  constructor(message: string, response: Response, body: NchatApiErrorResponse) {\n    super(message, response);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, NchatApiErrorResponse)\n    }\n    this.body = body;\n  }\n}\n\nexport default NchatApi;\n","import React from \"react\";\nimport { User } from \"../models/User\";\n\ninterface ChatAppContextType {\n  authKey: string,\n  user: User,\n}\n\nexport const ChatAppContext = React.createContext<ChatAppContextType>({\n  authKey: \"\",\n  user: {\n    id: -1,\n    name: \"\",\n    username: \"\"\n  },\n});\n","import React from 'react';\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport { ChatAppContext } from '../ChatAppContext';\n\nimport \"./SidebarBanner.css\"\n\ninterface SidebarBannerProps extends RouteComponentProps {\n  handleNewConversation: () => void,\n}\n\nfunction SidebarBanner(props: SidebarBannerProps) {\n  return (\n    <ChatAppContext.Consumer>\n      {\n        context => {\n          return (\n            <header className=\"SidebarBanner\">\n              <div className=\"SidebarBanner__userName\">\n                {context.user.name ?? context.user.username}\n              </div>\n              <button className=\"SidebarBanner__plus\" onClick={props.handleNewConversation}>\n                ＋\n              </button>\n            </header>\n          )\n        }\n      }\n    </ChatAppContext.Consumer>\n  );\n}\n\nexport default SidebarBanner;","import React from 'react';\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport { Conversation } from '../../models/Conversation';\n\nimport \"./ConversationRow.css\"\n\ninterface ConversationRowProps extends RouteComponentProps {\n  selected: boolean,\n  conversation: Conversation,\n  handleConversationRowClick: (conversation: Conversation) => void,\n}\n\nfunction ConversationRow(props: ConversationRowProps) {\n  return (\n    <div\n      className={\"ConversationRow\" + (props.selected ? \" ConversationRow--selected\" : \"\")}\n      onClick={() => props.handleConversationRowClick(props.conversation)}>\n      <div className=\"ConversationRow__name\">\n        {props.conversation.conversationPartner.name\n          ?? props.conversation.conversationPartner.username}\n      </div>\n      <div className=\"ConversationRow__preview\">\n        {props.conversation.messages[props.conversation.messages.length - 1].body}\n      </div>\n    </div>\n  );\n}\n\nexport default ConversationRow;\n","import React from 'react';\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport ConversationRow from './ConversationRow';\nimport { Conversation } from '../../models/Conversation';\n\nimport \"./ConversationList.css\"\n\ninterface ConversationListProps extends RouteComponentProps {\n  conversations: Conversation[],\n  selectedConversation: Conversation | null,\n  handleConversationRowClick: (conversation: Conversation) => void,\n}\n\nfunction ConversationList(props: ConversationListProps) {\n  const conversationRows = props.conversations.map(conversation => {\n    return (\n      <ConversationRow\n        key={conversation.uuid}\n        selected={conversation.uuid === props.selectedConversation?.uuid}\n        conversation={conversation}\n        handleConversationRowClick={props.handleConversationRowClick} />\n    );\n  });\n  return (\n    <div className=\"ConversationList\">\n      {conversationRows}\n    </div>\n  );\n}\n\nexport default ConversationList;\n","import React from 'react';\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport SidebarBanner from './SidebarBanner';\nimport ConversationList from './ConversationList';\nimport { Conversation } from '../../models/Conversation';\n\nimport './Sidebar.css'\n\ninterface SidebarProps extends RouteComponentProps {\n  conversations: Conversation[],\n  selectedConversation: Conversation | null,\n  handleNewConversation: () => void,\n  handleConversationRowClick: (conversation: Conversation) => void,\n}\n\nfunction Sidebar(props: SidebarProps) {\n  return (\n    <nav className=\"Sidebar\">\n      <SidebarBanner handleNewConversation={props.handleNewConversation} />\n      <ConversationList\n        conversations={props.conversations}\n        selectedConversation={props.selectedConversation}\n        handleConversationRowClick={props.handleConversationRowClick} />\n    </nav>\n  );\n}\n\nexport default Sidebar;\n","import React from 'react'\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport { Conversation } from '../../models/Conversation';\n\nimport './ConversationViewBanner.css'\n\ninterface ConversationViewBannerProps extends RouteComponentProps {\n  selectedConversation: Conversation,\n}\n\ninterface ConversationViewBannerState {\n}\n\nfunction ConversationViewBanner(props: ConversationViewBannerProps) {\n  return (\n    <header className=\"ConversationViewBanner\" >\n      {props.selectedConversation.conversationPartner.name\n        ?? props.selectedConversation.conversationPartner.username}\n    </header >\n  );\n}\n\nexport default ConversationViewBanner;","import React from \"react\"\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport { ChatAppContext } from \"../ChatAppContext\";\nimport { Message } from \"../../models/Message\";\n\nimport './MessageView.css'\n\ninterface MessageViewProps extends RouteComponentProps {\n  message: Message,\n}\n\nfunction MessageView(props: MessageViewProps) {\n  return (\n    <ChatAppContext.Consumer>\n      {context =>\n        <div\n          className={\n            \"MessageView\"\n            + (context.user?.id === props.message.senderId\n              ? (props.message.id === null\n                ? \" MessageView--us_unsynced\"\n                : \" MessageView--us_synced\"\n              )\n              : \" MessageView--them\")\n          }>\n          <div className=\"MessageView__messageBody\">\n            {props.message.body}\n          </div>\n        </div >\n      }\n    </ChatAppContext.Consumer >\n  );\n}\n\nexport default MessageView;\n","import React from 'react';\n\nimport \"./LoadingIcon.css\";\n\ninterface LoadingIconProps {\n  width?: number,\n  height?: number,\n}\n\nfunction LoadingIcon(props: LoadingIconProps) {\n  const style = {\n    width: props.width ?? 40,\n    height: props.height ?? 40,\n  }\n  return (\n    <div className=\"LoadingIcon\" style={style}>\n    </div>\n  )\n}\n\nexport default LoadingIcon;","import React from 'react'\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport MessageView from './MessageView';\nimport { Message } from '../../models/Message';\nimport { ChatAppContext } from '../ChatAppContext';\n\nimport './MessagesView.css'\nimport LoadingIcon from '../../misc/LoadingIcon';\n\ninterface MessagesViewProps extends RouteComponentProps {\n  isLoading: boolean,\n  messages: Message[],\n}\n\ninterface MessagesViewState {\n}\n\ninterface MessagesViewSnapshot {\n  isScrolledToBottom: boolean,\n}\n\nclass MessagesView extends React.Component<MessagesViewProps, MessagesViewState> {\n  // Number of pixels chat div can be scrolled above bottom to still be considered at bottom\n  SCROLL_TOLERANCE = 40;\n\n  conversationViewDiv = React.createRef<HTMLDivElement>();\n\n  static contextType = ChatAppContext;\n  context!: React.ContextType<typeof ChatAppContext>\n\n  constructor(props: MessagesViewProps) {\n    super(props);\n    this.scrollToBottom = this.scrollToBottom.bind(this);\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  getSnapshotBeforeUpdate(prevProps: MessagesViewProps, prevState: MessagesViewState):\n    MessagesViewSnapshot {\n    return {\n      isScrolledToBottom: this.isScrolledToBottom()\n    };\n  }\n\n  render() {\n    let messages: JSX.Element[] = this.props.messages.map(message => {\n      return <MessageView key={message.uuid} message={message} />\n    });\n    return (\n      <div className=\"MessagesView\" ref={this.conversationViewDiv}>\n        {this.props.isLoading\n          && <div className=\"MessagesView__loadingIcon\"><LoadingIcon /></div>}\n        {messages}\n      </div>\n    );\n  }\n\n  componentDidUpdate(\n    prevProps: MessagesViewProps,\n    prevState: MessagesViewState,\n    snapshot: MessagesViewSnapshot,\n  ) {\n    const prevMessages = prevProps.messages;\n    const messages = this.props.messages;\n\n    // If there's a new message added\n    if (prevMessages[prevMessages.length - 1]?.uuid !== messages[messages.length - 1]?.uuid) {\n      // Keep us scrolled to the bottom if we're already there, or if the last message\n      // added is from us (i.e. we just sent a message).\n      if (snapshot.isScrolledToBottom\n        || messages[messages.length - 1].senderId === this.context.user.id) {\n        this.scrollToBottom();\n      }\n    }\n  }\n\n  private isScrolledToBottom(): boolean {\n    const node = this.conversationViewDiv.current;\n    if (node === null) {\n      return true;\n    }\n    return node.scrollTop >= (node.scrollHeight - node.clientHeight) - this.SCROLL_TOLERANCE;\n  }\n\n  private scrollToBottom() {\n    const node = this.conversationViewDiv.current;\n    if (node === null) {\n      return;\n    }\n    node.scrollTo(0, node.scrollHeight - node.clientHeight);\n  }\n}\n\nexport default MessagesView;\n","import React, { ChangeEvent, KeyboardEvent } from 'react'\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport './MessageInput.css'\n\ninterface MessageInputProps extends RouteComponentProps {\n  autoFocus: boolean,\n  disabled?: boolean,\n  handleSendMessage: (messageBody: string) => boolean,\n}\n\ninterface MessageInputState {\n  messageBody: string,\n}\n\nclass MessageInput extends React.Component<MessageInputProps, MessageInputState> {\n  state: MessageInputState = {\n    messageBody: \"\",\n  };\n\n  constructor(props: MessageInputProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickSend = this.handleClickSend.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  handleChange(event: ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      messageBody: event.target.value,\n    });\n  }\n\n  async handleClickSend() {\n    if (this.state.messageBody.trim() === \"\") {\n      return;\n    }\n    const success = this.props.handleSendMessage(this.state.messageBody);\n    if (success) {\n      this.setState({\n        messageBody: \"\",\n      });\n    }\n  }\n\n  handleKeyDown(event: KeyboardEvent<HTMLInputElement>) {\n    if (event.key === \"Enter\") {\n      this.handleClickSend();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"MessageInput\" >\n        <input\n          name=\"messageBody\"\n          className=\"MessageInput__input\"\n          type=\"text\"\n          value={this.state.messageBody}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleChange}\n          autoFocus={this.props.autoFocus}\n          placeholder=\"Type a message\" />\n        <button\n          className=\"MessageInput__button button\"\n          onClick={this.handleClickSend}\n          disabled={this.props.disabled}>\n          Send\n          </button>\n      </div>\n    );\n  }\n}\n\nexport default MessageInput;\n","import React from 'react';\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport { Conversation } from '../../models/Conversation';\nimport ConversationViewBanner from './ConversationViewBanner';\nimport MessagesView from './MessagesView';\nimport MessageInput from './MessageInput';\n\nimport './ConversationView.css'\n\ninterface ConversationViewProps extends RouteComponentProps {\n  selectedConversation: Conversation,\n  handleSendMessage: (messageBody: string) => void,\n}\n\nfunction ConversationView(props: ConversationViewProps) {\n  return (\n    <div className=\"ConversationView\" >\n      <ConversationViewBanner\n        selectedConversation={props.selectedConversation} />\n      <MessagesView\n        isLoading={props.selectedConversation.isLoading}\n        messages={props.selectedConversation.messages} />\n      <MessageInput\n        autoFocus={true}\n        handleSendMessage={\n          (messageBody) => {\n            props.handleSendMessage(messageBody);\n            return true;\n          }\n        } />\n    </div>\n  );\n}\n\nexport default ConversationView","import React, { ChangeEvent, FocusEvent } from 'react';\nimport LoadingIcon from '../../misc/LoadingIcon';\n\nimport './ConversationCreatorViewBanner.css'\n\nexport enum ConversationCreatorViewBannerStatus {\n  Empty,\n  Loading,\n  Ok,\n  Error,\n}\n\ninterface ConversationCreatorViewBannerProps {\n  conversationCreatorUsername: string,\n  status: ConversationCreatorViewBannerStatus,\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void,\n  handleBlur: (event: FocusEvent<HTMLInputElement>) => void,\n}\n\ninterface ConversationCreatorViewBannerState {\n}\n\nclass ConversationCreatorViewBanner extends\n  React.Component<ConversationCreatorViewBannerProps, ConversationCreatorViewBannerState> {\n  render() {\n    let status: JSX.Element;\n    switch (this.props.status) {\n      case ConversationCreatorViewBannerStatus.Empty:\n        status = <span className=\"ConversationCreatorViewBanner__to\">To:</span>;\n        break;\n      case ConversationCreatorViewBannerStatus.Error:\n        status = <div className=\"ConversationCreatorViewBanner__error\"></div>;\n        break;\n      case ConversationCreatorViewBannerStatus.Loading:\n        status = <LoadingIcon width={20} height={20} />;\n        break;\n      case ConversationCreatorViewBannerStatus.Ok:\n        status = <div className=\"ConversationCreatorViewBanner__success\"></div>;\n        break;\n    }\n    return (\n      <header className=\"ConversationCreatorViewBanner\">\n        <div className=\"ConversationCreatorViewBanner__status\">\n          <label\n            htmlFor=\"ConversationCreatorViewBannerInput\"\n            className=\"ConversationCreatorViewBanner__label\">\n            {status}\n          </label>\n        </div>\n        <input\n          type=\"text\"\n          className=\"ConversationCreatorViewBanner__input\"\n          placeholder=\"Username\"\n          value={this.props.conversationCreatorUsername}\n          autoFocus={true}\n          onChange={this.props.handleChange}\n          onBlur={this.props.handleBlur}\n          id=\"ConversationCreatorViewBannerInput\" />\n      </header>\n    );\n  }\n}\n\nexport default ConversationCreatorViewBanner;","import React, { ChangeEvent, FocusEvent } from 'react';\n\nimport ConversationCreatorViewBanner, { ConversationCreatorViewBannerStatus }\n  from './ConversationCreatorViewBanner';\nimport MessageInput from './MessageInput';\nimport { User } from '../../models/User';\nimport NchatApi from '../../utils/NchatApi';\nimport { ChatAppContext } from '../ChatAppContext';\nimport { UserJson } from '../../utils/json/UserJson';\n\nimport './ConversationCreatorView.css';\n\ninterface GetUserResponse {\n  user: UserJson,\n}\n\ninterface ConversationCreatorViewProps {\n  handleSendMessage: (messageBody: string, user?: User) => void,\n}\n\ninterface ConversationCreatorViewState {\n  username: string,\n  conversationPartner: User | null,\n  usernameInputStatus: ConversationCreatorViewBannerStatus,\n}\n\nclass ConversationCreatorView\n  extends React.Component<ConversationCreatorViewProps, ConversationCreatorViewState> {\n\n  static contextType = ChatAppContext;\n  context!: React.ContextType<typeof ChatAppContext>\n\n  state: ConversationCreatorViewState = {\n    username: \"\",\n    conversationPartner: null,\n    usernameInputStatus: ConversationCreatorViewBannerStatus.Empty,\n  }\n\n  constructor(props: ConversationCreatorViewProps) {\n    super(props);\n    this.handleUsernameChange = this.handleUsernameChange.bind(this);\n    this.handleSendMessage = this.handleSendMessage.bind(this);\n    this.handleUsernameInputBlur = this.handleUsernameInputBlur.bind(this);\n  }\n\n  handleUsernameChange(event: ChangeEvent<HTMLInputElement>) {\n    const username = event.target.value;\n    this.setState({\n      usernameInputStatus: ConversationCreatorViewBannerStatus.Empty,\n      username: username,\n    });\n  }\n\n  handleSendMessage(messageBody: string): boolean {\n    if (this.state.conversationPartner === null) {\n      return false;\n    }\n    this.props.handleSendMessage(messageBody, this.state.conversationPartner);\n    return true;\n  }\n\n  async handleUsernameInputBlur(event: FocusEvent<HTMLInputElement>) {\n    this.setState({\n      usernameInputStatus: ConversationCreatorViewBannerStatus.Loading,\n    });\n\n    const username = this.state.username;\n    if (username.trim() === \"\") {\n      this.setState({\n        usernameInputStatus: ConversationCreatorViewBannerStatus.Empty,\n      });\n      return;\n    }\n\n    try {\n      const user = await this.getConversationPartner(username);\n      this.setState({\n        conversationPartner: user,\n        usernameInputStatus: ConversationCreatorViewBannerStatus.Ok,\n      });\n    } catch (err) {\n      this.setState({\n        conversationPartner: null,\n        usernameInputStatus: ConversationCreatorViewBannerStatus.Error,\n      });\n    }\n  }\n\n  async getConversationPartner(username: string): Promise<User> {\n    const response =\n      await NchatApi.get<GetUserResponse>(\"users/\" + username, this.context.authKey);\n    const userJson = response.data.user;\n\n    return {\n      id: userJson.id,\n      username: userJson.username,\n      name: userJson.name,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"ConversationCreatorView\">\n        <ConversationCreatorViewBanner\n          conversationCreatorUsername={this.state.username}\n          status={this.state.usernameInputStatus}\n          handleChange={this.handleUsernameChange}\n          handleBlur={this.handleUsernameInputBlur} />\n        <div className=\"ConversationCreatorView__spacer\" />\n        <MessageInput\n          autoFocus={false}\n          handleSendMessage={this.handleSendMessage}\n          disabled={this.state.usernameInputStatus !== ConversationCreatorViewBannerStatus.Ok} />\n      </div>\n    )\n  }\n}\n\nexport default ConversationCreatorView;","import React from 'react';\nimport { RouteComponentProps } from \"@reach/router\";\n\nimport { Conversation } from '../../models/Conversation';\nimport ConversationView from './ConversationView';\nimport ConversationCreatorView from './ConversationCreatorView';\nimport { User } from '../../models/User';\n\nimport \"./ContentView.css\"\n\ninterface ContentViewProps extends RouteComponentProps {\n  isConversationCreatorOpen: boolean,\n  selectedConversation: Conversation | null,\n  handleSendMessage: (messageBody: string, user?: User) => void,\n}\n\nfunction ContentView(props: ContentViewProps) {\n  return (\n    <main className=\"ContentView\" >\n      {\n        props.isConversationCreatorOpen\n          ?\n          <ConversationCreatorView\n            handleSendMessage={props.handleSendMessage} />\n          :\n          props.selectedConversation !== null\n          && <ConversationView\n            selectedConversation={props.selectedConversation}\n            handleSendMessage={props.handleSendMessage}\n            key={props.selectedConversation?.uuid} />\n      }\n    </main>\n  )\n}\n\nexport default ContentView;\n","import React from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { v4 as uuidv4 } from 'uuid';\nimport update from 'immutability-helper';\n\nimport NchatApi from '../utils/NchatApi';\nimport Sidebar from './sidebar/Sidebar'\nimport ContentView from './contentView/ContentView'\nimport { User } from '../models/User';\nimport { Conversation } from '../models/Conversation';\nimport { Message } from '../models/Message';\nimport { ConversationJson } from '../utils/json/ConversationJson';\nimport { MessageJson } from '../utils/json/MessageJson';\nimport { ChatAppContext } from './ChatAppContext';\nimport NchatWebSocket, { WSNotification, WSRequest, WSSuccessResponse }\n  from '../utils/NchatWebSocket';\n\nimport './ChatApp.css';\n\ninterface GetConversationResponse {\n  conversation: ConversationJson,\n}\n\ninterface WSMessageNotificationData {\n  message: MessageJson,\n  conversation: ConversationJson,\n}\n\ninterface WSMessageRequestData {\n  username: string,\n  body: string,\n}\n\ninterface WSMessageSuccessResponseData {\n  message: MessageJson,\n  conversation: ConversationJson,\n}\n\ninterface WSMessageErrorResponseData {\n}\n\ninterface ChatAppProps extends RouteComponentProps {\n  authKey: string,\n  user: User,\n  conversations: Conversation[],\n  webSocket: NchatWebSocket,\n}\n\ninterface ChatAppState {\n  conversations: Conversation[],\n  selectedConversation: Conversation | null,\n  isConversationCreatorOpen: boolean,\n}\n\nclass ChatApp extends React.Component<ChatAppProps, ChatAppState> {\n  state: ChatAppState = {\n    conversations: this.props.conversations,\n    selectedConversation: null,\n    isConversationCreatorOpen: false,\n  }\n\n  constructor(props: ChatAppProps) {\n    super(props);\n    this.handleMessageReceived = this.handleMessageReceived.bind(this);\n    this.handleNewConversation = this.handleNewConversation.bind(this);\n    this.handleConversationRowClick = this.handleConversationRowClick.bind(this);\n    this.handleSendMessage = this.handleSendMessage.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.webSocket.addNotificationListener(\"newMessage\", this.handleMessageReceived);\n  }\n\n  handleNewConversation() {\n    this.setState({\n      selectedConversation: null,\n      isConversationCreatorOpen: true,\n    });\n  }\n\n  async handleConversationRowClick(conversation: Conversation) {\n    if (conversation.uuid === this.state.selectedConversation?.uuid) {\n      return;\n    }\n\n    this.setState({\n      isConversationCreatorOpen: false,\n    });\n\n    if (!conversation.isHistoryLoaded && !conversation.isLoading) {\n      let index = this.state.conversations.findIndex(c => c.uuid === conversation.uuid);\n      const loadingConversations = update(this.state.conversations,\n        {\n          [index]: {\n            isLoading: {\n              $set: true,\n            },\n          },\n        },\n      );\n\n      this.setState({\n        conversations: loadingConversations,\n        selectedConversation: loadingConversations[index],\n      });\n\n      const response = await NchatApi.get<GetConversationResponse>(\n        \"conversations/\" + conversation.id, this.props.authKey);\n      const newMessages = response.data.conversation.messages.map(message => {\n        return {\n          uuid: uuidv4(),\n          id: message.id,\n          senderId: message.senderId,\n          body: message.body,\n          sent: message.sent,\n        }\n      });\n\n      index = this.state.conversations.findIndex(c => c.uuid === conversation.uuid);\n      const updatedConversations = update(this.state.conversations,\n        {\n          [index]: {\n            messages: {\n              $set: newMessages,\n            },\n            isLoading: {\n              $set: false,\n            },\n            isHistoryLoaded: {\n              $set: true,\n            }\n          }\n        },\n      );\n\n      this.setState({\n        conversations: updatedConversations,\n        selectedConversation: updatedConversations[index],\n      });\n    } else {\n      this.setState({\n        selectedConversation: conversation,\n      });\n    }\n  }\n\n  handleMessageReceived(notification: WSNotification<WSMessageNotificationData>) {\n    const messageJson = notification.data.message;\n    const conversationJson = notification.data.conversation;\n\n    const newMessage: Message = {\n      uuid: uuidv4(),\n      id: messageJson.id,\n      body: messageJson.body,\n      senderId: messageJson.senderId,\n      sent: messageJson.sent,\n    };\n\n    const conversationIndex = this.state.conversations.findIndex(c => c.id === conversationJson.id);\n    if (conversationIndex === -1) {\n      const newConversation: Conversation = {\n        uuid: uuidv4(),\n        id: conversationJson.id,\n        conversationPartner: {\n          id: conversationJson.conversationPartner.id,\n          username: conversationJson.conversationPartner.username,\n          name: conversationJson.conversationPartner.name,\n        },\n        messages: [newMessage],\n        isHistoryLoaded: true,\n        isLoading: false,\n      };\n      const updatedConversations = [\n        newConversation,\n        ...this.state.conversations,\n      ];\n      this.setState({\n        conversations: updatedConversations,\n      });\n    } else {\n      const updatedConversations =\n        this.addMessageToConversation(this.state.conversations, conversationIndex, newMessage);\n      this.setState({\n        conversations: updatedConversations,\n      });\n      if (this.state.selectedConversation?.uuid === updatedConversations[0].uuid) {\n        this.setState({\n          selectedConversation: updatedConversations[0],\n        });\n      };\n    }\n  }\n\n  async handleSendMessage(messageBody: string, conversationPartner?: User) {\n    const newMessage: Message = {\n      uuid: uuidv4(),\n      id: null,\n      senderId: this.props.user.id,\n      body: messageBody,\n      sent: null,\n    }\n\n    let selectedConversation: Conversation | null;\n\n    if (this.state.isConversationCreatorOpen && conversationPartner) {\n      const newConversation: Conversation = {\n        uuid: uuidv4(),\n        id: null,\n        conversationPartner: conversationPartner,\n        isHistoryLoaded: true,\n        isLoading: false,\n        messages: [newMessage],\n      };\n\n      this.setState((state, props) => {\n        const updatedConversations = [\n          newConversation,\n          ...state.conversations,\n        ];\n        return {\n          conversations: updatedConversations,\n          selectedConversation: newConversation,\n          isConversationCreatorOpen: false,\n        };\n      });\n\n      selectedConversation = newConversation;\n    } else {\n      selectedConversation = this.state.selectedConversation;\n\n      if (selectedConversation === null) {\n        return;\n      }\n\n      const conversationIndex = this.state.conversations.findIndex(c => {\n        return c.uuid === selectedConversation?.uuid\n      });\n      const updatedConversations =\n        this.addMessageToConversation(this.state.conversations, conversationIndex, newMessage);\n\n      this.setState({\n        conversations: updatedConversations,\n        selectedConversation: updatedConversations[0],\n      });\n    }\n\n    const response = await this.sendMessage(\n      selectedConversation.conversationPartner.username, messageBody);\n\n\n    this.setState((state, props) => {\n      const conversationIndex = state.conversations.findIndex(c => {\n        return c.uuid === selectedConversation?.uuid\n      });\n      const messageIndex = state.conversations[conversationIndex].messages.findIndex(m => {\n        return m.uuid === newMessage.uuid;\n      });\n\n      const syncedConversations = update(state.conversations,\n        {\n          [conversationIndex]: {\n            id: {\n              $set: response.data.conversation.id,\n            },\n            messages: {\n              [messageIndex]: {\n                id: {\n                  $set: response.data.message.id\n                },\n              },\n            },\n          },\n        },\n      );\n\n      let newState: any = {\n        conversations: syncedConversations,\n      };\n\n      if (this.state.selectedConversation?.uuid === selectedConversation?.uuid) {\n        newState = {\n          ...newState,\n          selectedConversation: syncedConversations[conversationIndex],\n        };\n      }\n\n      return newState;\n    });\n  }\n\n  private addMessageToConversation(conversations: Conversation[], index: number, message: Message):\n    Conversation[] {\n    const updatedConversation = update(this.state.conversations[index],\n      {\n        messages: {\n          $push: [message],\n        }\n      }\n    );\n    const withRemovedConversation = update(conversations,\n      {\n        $splice: [[index, 1]]\n      }\n    );\n    return [\n      updatedConversation,\n      ...withRemovedConversation,\n    ]\n  }\n\n  private sendMessage(username: string, body: string):\n    Promise<WSSuccessResponse<WSMessageSuccessResponseData>> {\n    const request: WSRequest<WSMessageRequestData> = {\n      type: \"request\",\n      method: \"sendMessage\",\n      data: {\n        username: username,\n        body: body,\n      },\n    };\n    return this.props.webSocket.sendRequest(request);\n  }\n\n  render() {\n    const contextValue = {\n      authKey: this.props.authKey,\n      user: this.props.user,\n    }\n    return (\n      <div className=\"ChatApp\">\n        <ChatAppContext.Provider value={contextValue}>\n          <Sidebar\n            conversations={this.state.conversations}\n            selectedConversation={this.state.selectedConversation}\n            handleConversationRowClick={this.handleConversationRowClick}\n            handleNewConversation={this.handleNewConversation} />\n          <ContentView\n            isConversationCreatorOpen={this.state.isConversationCreatorOpen}\n            handleSendMessage={this.handleSendMessage}\n            selectedConversation={this.state.selectedConversation} />\n        </ChatAppContext.Provider>\n      </div >\n    );\n  }\n\n  componentWillUnmount() {\n    this.props.webSocket.close();\n  }\n}\n\nexport default ChatApp;\n","export interface WSNotification<T> {\n  type: \"notification\",\n  method: string,\n  data: T,\n}\n\nexport interface WSRequest<T> {\n  id?: number,\n  type: \"request\",\n  method: string,\n  data: T,\n}\n\nexport interface WSSuccessResponse<T> {\n  id: number,\n  type: \"response\",\n  status: \"success\",\n  data: T,\n}\n\nexport interface WSErrorResponse<T> {\n  id: number,\n  type: \"response\",\n  status: \"error\",\n  code: number,\n  message: string,\n  data: T,\n}\n\ntype NotificationListener = (notification: WSNotification<any>) => void\ninterface NotificationListeners {\n  [index: string]: NotificationListener[]\n}\n\ntype PromiseResolveFunc = (value: WSSuccessResponse<any>) => void;\ntype PromiseRejectFunc = (reason: WSErrorResponse<any>) => void;\ntype PromiseCallbacks = {\n  resolve: PromiseResolveFunc,\n  reject: PromiseRejectFunc,\n}\n\nclass NchatWebSocket {\n  static websocketUrl = NchatWebSocket.getWebsocketUrl();\n\n  webSocket: WebSocket;\n  isAuthMessageSent = false;\n  requestId = 0;\n  requestPromises: PromiseCallbacks[] = [];\n  notificationListeners: NotificationListeners = {};\n\n  static getWebsocketUrl(): string {\n    let location = window.location;\n    let url = (location.protocol === \"https:\" ? \"wss:\" : \"ws:\");\n    url += \"//\" + location.host + \"/api/v1/chat\";\n    return url;\n  }\n\n  static createWebSocket(): Promise<NchatWebSocket> {\n    const webSocket = new WebSocket(this.websocketUrl, \"nchat\");\n    return new Promise((resolve, reject) => {\n      webSocket.addEventListener(\"open\", (event: Event) => {\n        const nchatWebSocket = new NchatWebSocket(webSocket);\n        resolve(nchatWebSocket);\n      })\n      webSocket.addEventListener(\"error\", (event: Event) => {\n        reject(event);\n      })\n    });\n  }\n\n  constructor(webSocket: WebSocket) {\n    this.handleMessageReceived = this.handleMessageReceived.bind(this);\n    this.webSocket = webSocket;\n    this.webSocket.addEventListener(\"message\", this.handleMessageReceived);\n  }\n\n  handleMessageReceived(event: MessageEvent) {\n    const data: WSNotification<any> | WSSuccessResponse<any> | WSErrorResponse<any> =\n      JSON.parse(event.data);\n    if (data.type === \"response\") {\n      if (data.status === \"success\") {\n        this.requestPromises[data.id].resolve(data);\n      } else {\n        this.requestPromises[data.id].reject(data);\n      }\n    } else if (data.type === \"notification\") {\n      const listeners = this.notificationListeners[data.method];\n      if (typeof listeners !== \"undefined\") {\n        for (const listener of listeners) {\n          listener(data);\n        }\n      }\n    }\n  }\n\n  addNotificationListener(method: string, listener: (notification: WSNotification<any>) => void) {\n    if (this.notificationListeners.hasOwnProperty(method)) {\n      this.notificationListeners[method]?.push(listener);\n    } else {\n      this.notificationListeners[method] = [listener];\n    }\n  }\n\n  sendRequest<T, S>(request: WSRequest<T>):\n    Promise<WSSuccessResponse<S>> {\n    const id = this.getNextId();\n    request.id = id;\n\n    this.webSocket.send(JSON.stringify(request));\n\n    return new Promise((resolve, reject) => {\n      this.registerPromise(id, resolve, reject);\n    });\n  }\n\n  close() {\n    this.webSocket.close();\n  }\n\n  private registerPromise(id: number, resolve: PromiseResolveFunc, reject: PromiseRejectFunc) {\n    this.requestPromises[id] = {\n      resolve: resolve,\n      reject: reject\n    };\n  }\n\n  private getNextId(): number {\n    return this.requestId++;\n  }\n}\n\nexport default NchatWebSocket;","import React from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ChatApp from './ChatApp';\nimport { Conversation } from '../models/Conversation';\nimport { ConversationJson } from '../utils/json/ConversationJson';\nimport { User } from '../models/User';\nimport { UserJson } from '../utils/json/UserJson';\nimport NchatApi from '../utils/NchatApi';\nimport NchatWebSocket, { WSRequest, WSSuccessResponse } from '../utils/NchatWebSocket';\n\nimport \"./ChatAppLoader.css\";\nimport LoadingIcon from '../misc/LoadingIcon';\n\ninterface GetAuthenticateResponse {\n  user: UserJson,\n}\n\ninterface GetConversationsResponse {\n  conversations: ConversationJson[];\n}\n\ninterface WSAuthRequestData {\n  authKey: string,\n}\n\ninterface WSAuthResponseData {\n}\n\ninterface ChatAppLoaderProps extends RouteComponentProps {\n  authKey: string,\n  user: User | null,\n}\n\ninterface ChatAppLoaderState {\n  user: User | null,\n  conversations: Conversation[] | null,\n  webSocket: NchatWebSocket | null,\n}\n\nclass ChatAppLoader extends React.Component<ChatAppLoaderProps, ChatAppLoaderState> {\n  state: ChatAppLoaderState = {\n    user: this.props.user,\n    conversations: null,\n    webSocket: null,\n  }\n\n  async componentDidMount() {\n    const userPromise = this.state.user === null\n      ? Promise.resolve(this.state.user)\n      : this.initUser();\n    const conversationsPromise = this.initConversations();\n\n    const webSocket = await NchatWebSocket.createWebSocket();\n    const authResponse = await this.sendAuth(webSocket);\n    if (authResponse.status !== \"success\") {\n      throw new Error(\"Could not connect to webSocket.\")\n    }\n\n    const [user, conversations] = await Promise.all([userPromise, conversationsPromise]);\n\n    this.setState({\n      user: user,\n      conversations: conversations,\n      webSocket: webSocket,\n    })\n  }\n\n  async initUser(): Promise<User> {\n    const response =\n      await NchatApi.get<GetAuthenticateResponse>(\"authenticate\", this.props.authKey);\n    const user: User = {\n      id: response.data.user.id,\n      name: response.data.user.name,\n      username: response.data.user.username,\n    }\n    return user;\n  }\n\n  async initConversations(): Promise<Conversation[]> {\n    const response =\n      await NchatApi.get<GetConversationsResponse>(\"conversations\", this.props.authKey);\n\n    const conversations = response.data.conversations.map(conversation => {\n      return {\n        uuid: uuidv4(),\n        id: conversation.id,\n        conversationPartner: {\n          id: conversation.conversationPartner.id,\n          username: conversation.conversationPartner.username,\n          name: conversation.conversationPartner.name,\n        },\n        messages: conversation.messages.map(message => {\n          return {\n            uuid: uuidv4(),\n            id: message.id,\n            senderId: message.senderId,\n            body: message.body,\n            sent: message.sent,\n          };\n        }),\n        isHistoryLoaded: false,\n        isLoading: false,\n      };\n    });\n    return conversations;\n  }\n\n  private sendAuth(webSocket: NchatWebSocket):\n    Promise<WSSuccessResponse<WSAuthResponseData>> {\n    const request: WSRequest<WSAuthRequestData> = {\n      type: \"request\",\n      method: \"authorize\",\n      data: {\n        authKey: this.props.authKey,\n      },\n    };\n\n    return webSocket.sendRequest(request);\n  }\n\n  render() {\n    return (\n      <div className=\"ChatAppLoader\">\n        {\n          this.state.user && this.state.conversations && this.state.webSocket\n            ?\n            <ChatApp\n              authKey={this.props.authKey}\n              user={this.state.user}\n              webSocket={this.state.webSocket}\n              conversations={this.state.conversations} />\n            :\n            <div className=\"ChatAppLoader__loading\">\n              <LoadingIcon />\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default ChatAppLoader","import React, { ChangeEvent, FormEvent } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Link } from \"@reach/router\";\n\nimport './LoginForm.css';\n\ninterface LoginFormProps extends RouteComponentProps {\n  authenticateUser: (username: string, password: string) => void,\n};\n\ninterface LoginFormState {\n  username: string,\n  password: string,\n}\n\nclass LoginForm extends React.Component<LoginFormProps, LoginFormState> {\n  state: LoginFormState = {\n    username: '',\n    password: '',\n  };\n\n  constructor(props: LoginFormProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      [event.target.name]: event.target.value,\n    } as Pick<LoginFormState, keyof LoginFormState>);\n  }\n\n  async handleSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    this.props.authenticateUser(this.state.username, this.state.password);\n  }\n\n  render() {\n    return (\n      <div className=\"LoginForm\" >\n        <h1>Login</h1>\n        <form onSubmit={this.handleSubmit}>\n          <p><input className=\"textInput\" name=\"username\" type=\"text\" placeholder=\"Username\"\n            value={this.state.username} onChange={this.handleChange} required={true}\n            autoFocus={true} /></p>\n          <p><input className=\"textInput\" name=\"password\" type=\"password\" placeholder=\"Password\"\n            value={this.state.password} onChange={this.handleChange} required={true} /></p>\n          <p><input className=\"button\" type=\"submit\" value=\"Login\" /></p>\n        </form>\n        <div className=\"LoginForm__signUpMessage\">\n          Don't have an account? <Link to=\"../signup\">Sign up</Link>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default LoginForm;\n","import React, { ChangeEvent, FormEvent } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Link } from \"@reach/router\";\n\nimport NchatApi from '../utils/NchatApi';\n\nimport './SignUpForm.css';\n\ninterface SignUpFormProps extends RouteComponentProps {\n  authenticateUser: (username: string, password: string) => void,\n};\n\ninterface SignUpFormState {\n  name: string,\n  username: string,\n  password: string,\n}\n\nclass SignUpForm extends React.Component<SignUpFormProps, SignUpFormState> {\n  state: SignUpFormState = {\n    \"name\": \"\",\n    \"username\": \"\",\n    \"password\": \"\",\n  };\n\n  constructor(props: SignUpFormProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      [event.target.name]: event.target.value,\n    } as Pick<SignUpFormState, keyof SignUpFormState>)\n  }\n\n  async handleSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    const requestBody = {\n      \"name\": this.state.name,\n      \"username\": this.state.username,\n      \"password\": this.state.password,\n    }\n\n    // try {\n    const response = await NchatApi.post(\"users\", requestBody);\n    this.props.authenticateUser(this.state.username, this.state.password);\n\n    // } catch (error) {\n    //   throw error;\n    // }\n  }\n\n  render() {\n    return (\n      <div className=\"SignUpForm\" >\n        <h1>Sign up</h1>\n        <form onSubmit={this.handleSubmit}>\n          <p><input className=\"textInput\" name=\"name\" type=\"text\" placeholder=\"Display name\"\n            value={this.state.name} onChange={this.handleChange} required={true}\n            autoFocus={true} /></p>\n          <p><input className=\"textInput\" name=\"username\" type=\"text\" placeholder=\"Username\"\n            value={this.state.username} onChange={this.handleChange} required={true} /></p>\n          <p><input className=\"textInput\" name=\"password\" type=\"password\" placeholder=\"Password\"\n            value={this.state.password} onChange={this.handleChange} required={true} /></p>\n          <p><input className=\"button\" type=\"submit\" value=\"Sign up\" /></p>\n        </form>\n        <div className=\"SignUpForm__loginMessage\">\n          Already have an account? <Link to=\"../login\">Login</Link>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default SignUpForm;\n","import React from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Router, navigate } from \"@reach/router\";\n\nimport LoginForm from './LoginForm';\nimport SignUpForm from './SignUpForm';\nimport NchatApi from '../utils/NchatApi';\nimport { UserJson } from '../utils/json/UserJson';\n\nimport './AccountsView.css'\nimport { User } from '../models/User';\n\ninterface AccountsViewProps extends RouteComponentProps {\n  setAuthenticatedUser: (authKey: string, user: User) => void;\n}\n\ninterface AccountsViewState {\n}\n\ninterface PostAuthenticateResponse {\n  authKey: string,\n  user: UserJson,\n}\n\nclass AccountsView extends React.Component<AccountsViewProps, AccountsViewState> {\n  constructor(props: AccountsViewProps) {\n    super(props);\n\n    this.authenticateUser = this.authenticateUser.bind(this);\n  }\n\n  async authenticateUser(username: string, password: string) {\n    const requestBody = {\n      \"username\": username,\n      \"password\": password,\n    }\n\n    // try {\n    const response = await NchatApi.post<PostAuthenticateResponse>(\"authenticate\", requestBody);\n\n    const authKey = response.data.authKey;\n    const user: User = {\n      id: response.data.user.id,\n      username: response.data.user.username,\n      name: response.data.user.name,\n    }\n    this.props.setAuthenticatedUser(authKey, user);\n    // } catch (error) {\n    //   throw error;\n    // }\n    navigate(\"/\");\n  }\n\n  render() {\n    return (\n      <main className=\"AccountsView\">\n        <Router>\n          <LoginForm path=\"login\" authenticateUser={this.authenticateUser} />\n          <SignUpForm path=\"signup\" authenticateUser={this.authenticateUser} />\n        </Router>\n      </main>\n    );\n  }\n}\n\nexport default AccountsView;","import React from 'react';\nimport { Router, RouteComponentProps, navigate } from \"@reach/router\";\n\nimport ChatAppLoader from './chatApp/ChatAppLoader';\nimport AccountsView from './accounts/AccountsView';\nimport { User } from './models/User'\n\nimport './App.css';\n\ninterface AppState {\n  authKey: string | null,\n  user: User | null,\n}\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    authKey: null,\n    user: null,\n  };\n\n  constructor(props: RouteComponentProps) {\n    super(props);\n\n    this.setAuthenticatedUser = this.setAuthenticatedUser.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.authKey === null) {\n      navigate('/accounts/login');\n    }\n  }\n\n  setAuthenticatedUser(authKey: string, user: User) {\n    this.setState({\n      \"authKey\": authKey,\n      \"user\": user,\n    })\n  }\n\n  render() {\n    return (\n      <Router className=\"Router\">\n        {this.state.authKey !== null &&\n          <ChatAppLoader path=\"/\"\n            authKey={this.state.authKey}\n            user={this.state.user}\n            key={this.state.user?.id} />}\n        <AccountsView path=\"accounts/*\" setAuthenticatedUser={this.setAuthenticatedUser} />\n      </Router >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './common.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}